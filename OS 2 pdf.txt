
QUESTION 1 TO 4
Extended Shell(Toy Shell)
Shell is an interface between user and operating
system. It is the command interpreter , which accept
the command name(program name) from user and executes
that command/program.
The command interpreter in Unix/Linux is called as
shell.In unix core operating system is also called as
kernel.
Shell mostly accepts the commands given by user from
keyboard , shell gets started automatically when
Operating System is successfully started.
There are various types of shell avialable on Linux
viz.BASH(Bourn Again Shell), CSH( C Shell), KSH(Kourn
Shell), TSH(it is enhanced C shell).
When shell is started successfully it generally display
some prompt to indicate the user that it is ready to
accept and execute the command.
*/
#include<stdio.h>
#include<string.h>
#include<stdlib.h>
#include<unistd.h>
#include<sys/types.h>
#include<fcntl.h>
#include <dirent.h>
#include <sys/stat.h>
char
cmd[80],token1[20],token2[20],token3[20],token4[20];
void count();
int main()
{
int pid;
int n;
while(1)
{
printf("\nNewshell$");
gets(cmd);
n=sscanf(cmd,"%s%s%s%s",token1,token2,token3,token4
);
if(strcmp(token1,"q")==0)
{
exit(0);
}
pid=fork();
if(pid==-1)
{
printf("Error\n");
}
else if(pid>0)
{
}
else
{
wait(NULL);
if(strcmp(token1,"list")==0)
{
list(token3,token2[0]);
exit(0);
}
if(strcmp(token1,"typeline")==0)
{
typeline(token3,token2);
exit(0);
}
if(strcmp(token1,"search")==0)
{
search(token3,token2[0],token4);
exit(0);
}
if(strcmp(token1,"count")==0)
{
count();
exit(0);
}
switch(n)
{
case 1:execlp(token1,token1,NULL);
break;
case
2:execlp(token1,token1,token2,NULL);
break;
case
3:execlp(token1,token1,token2,token3,NULL);
break;
case
4:execlp(token1,token1,token2,token3,token4,NULL);
break;
}
}
}
}
void list(char *dn, char op)
{
DIR *dp;
struct dirent *entry;
int dc=0,fc=0;
dp = opendir(dn);
if(dp==NULL)
{
printf("Dir %s not found.\n",dn);
return;
}
switch(op)
{
case 'f':
while(entry=readdir(dp))
{
if(entry->d_type==DT_REG)
printf("%s\n",entry->d_name);
}
break;
case 'n':
while(entry=readdir(dp))
{
if(entry->d_type==DT_DIR) dc++;
if(entry->d_type==DT_REG) fc++;
}
printf("%d Dir(s)\t%d File(s)\n",dc,fc);
break;
case 'i':
while(entry=readdir(dp))
{
>d_fileno);
}
if(entry->d_type==DT_REG)
printf("%s\t%d\n",entry->d_name,entrybreak;
}
closedir(dp);
}
void search(char *fn, char op, char *pattern)
{
int fh,count=0,i=0,j=0;
char buff[255],c,*p;
fh = open(fn,O_RDONLY);
if(fh==-1)
{
printf("File %s Not Found\n",fn);
return;
}
switch(op)
{
case 'f':
while(read(fh,&c,1))
{
buff[j++]=c;
if(c=='\n')
{
buff[j]='\0';
j=0;
i++;
if(strstr(buff,pattern))
{
printf("%d: %s",i,buff);
break;
}
}
}
break;
case 'c':
while(read(fh,&c,1))
{
buff[j++]=c;
if(c=='\n')
{
buff[j]='\0';
j=0;
p = buff;
while(p=strstr(p,pattern))
{
count++;
p++;
}
}
}
printf("Total No.of Occurrences = %d\n",count);
break;
case 'a':
while(read(fh,&c,1))
{
buff[j++]=c;
if(c=='\n')
{
buff[j]='\0';
j = 0;
i++;
if(strstr(buff,pattern))
printf("%d: %s",i,buff);
}
}
}//switch
close(fh);
}//search
void typeline(char *fn, char *op)
{
int fh,i,j,n;
char c;
fh = open(fn,O_RDONLY);
if(fh==-1)
{
printf("File %s not found.\n",fn);
return;
}
if(strcmp(op,"a")==0)
{
while(read(fh,&c,1)>0)
printf("%c",c);
close(fh);
return;
}
n = atoi(op);
if(n>0)
{
i=0;
while(read(fh,&c,1)>0)
{
printf("%c",c);
if(c=='\n') i++;
if(i==n) break;
}
}
if(n<0)
{
i=0;
while(read(fh,&c,1)>0)
{
if(c=='\n') i++;
}
lseek(fh,0,SEEK_SET);
j=1;
while(read(fh,&c,1)>0)
{
if(c=='\n') j++;
if(j==i+n) break;
}
while(read(fh,&c,1)>0)
{
printf("%c",c);
}
}
close(fh);
}
void count()
{
int fd;
char ch;
int c=0,w=0,l=0;
fd=open(token3,O_RDONLY);
while(read(fd,&ch,1))
{
if(ch!='\n'&& ch!='\t'&&ch!=' ')
c++;
if(ch=='\n'||ch=='\t'||ch==' ')
w++;
if(ch=='\n')
l++;
}
if(strcmp(token2,"c")==0)
printf("\ncharacter count=%d",c);
if(strcmp(token2,"w")==0)
printf("\nwordcount=%d",w);
if(strcmp(token2,"l")==0)
printf("\nlinecount=%d",l);
}
QUESTION 5
#include<stdio.h>
#include<sys/stat.h>
#include<unistd.h>
#include<fcntl.h>
int main(int argc, char *argv[])
{
struct stat fileStat;
int ch,fd=0;
FILE *fname;
if(argc!=3)
{ printf("Invalid number of arguments ");
return 1;
}
if(fname==NULL)
{
printf("Can't find the source file");
return 1;
}
//if((fd=open(filename,O_RDONLY))==-1)
//{
//perror("open");
//}
if(fstat(fd,&fileStat)<0) return 1;
printf("Information for %s\n ",filename);
printf("Inode:\t%d\n",fileStat.st_ino);
}
QUSTION 6
#include<stdio.h>
#include<sys/stat.h>
#include<fcntl.h>
long int findSize(char filename[])
{
FILE* fp;
Long int file_size;
Fp=fopen(filename,”r”);
if(fp==NULL)
{
printf(“FILe not found\n”);
return -1;
}
file_size=ftell(fp);
fclose(fp);
return file_size;
//printf(“File size is %ld\n”,file_size);
}
int main()
{
char file_name[]={“myfile.txt”};
long int res=findSize(file_name);
if(res!=-1)
printf(“File size is %ld\n”,res);
return 0;
}
Q7. WRITE A PROGRAM TO PRINT THE SIZE, TYPE OF FILE.
#include<stdio.h>
#include<io.h.
#include<fcntl.h>
#include<sys\stat.h>
int main()
{
int fp;
long file_size;
if((fp=open(“f:/cprojects/urls.txt”, O_RDONLY))==-
1)
printf(“Error opening the file \n”);
else
{
file_size=filelength(file_handle);
printf(“The file size in bytes is
%ld\n”,file_size);
close(fp);
}
return 0;
}
Q8.WRITE A PROGRAM TO DEMONSTRATE.USE OF ATEXIT()FUNC.
#include”apue.h”
static void my_exit1(void);
static void my_exit2(void);
int main(void)
{
if(atexit(my_exit1)!=0)
err_says(“cant register my_exit1”);
if(atexit(my_exit2)!=0)
err_says(“cant register my_exit2”);
printf(“main is done”);
return(0);
}
static void my_exit1(void);
{ printf(“first exit handler”); }
static void my_exit2(void);
{ printf(“second exit handler”); }
Q9.LIST ALL FILES IN DIRECTORY.
#include”apue.h”
#include<dirent.h>
int main(int argc, char *argv[])
{
DIR *dp;
struct dirent *dirp;
if(argc!=2)
printf(“error:Is directory_name”);
if((dp=opendir(argv[1]))==NULL)
printf(“cant open %s”,argv[1]);
while((dirp=readdir(dp))!=NULL)
printf(“%s\n”,dirp->d_name);
closedir(dp);
exit(0);
}
QUESTION 10
#include<stdio.h>
#include<fcntl.h>
#include<unistd.h>
#include<stdlib.h>
int main(void)
{
if(open(“/home/modern/Desktop/myfile.txt”,O_RDWR)<0
)
printf(“Open Error\n”);
if(open(“/home/modern/Desktop/myfile.txt”)<0)
printf(“Unlink Error\n”);
printf(“File Unlinked\n”);
sleep(15);
printf(“Done\n”);
exit(0);
}
